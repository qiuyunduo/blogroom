/*
 Navicat MySQL Data Transfer

 Source Server         : mysql
 Source Server Type    : MySQL
 Source Server Version : 50725
 Source Host           : localhost:3306
 Source Schema         : blogroom_article

 Target Server Type    : MySQL
 Target Server Version : 50725
 File Encoding         : 65001

 Date: 21/03/2019 19:59:34
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `class_id` mediumint(9) NULL DEFAULT NULL COMMENT '文章类别',
  `user_id` mediumint(9) NULL DEFAULT NULL COMMENT '文章作者id',
  `author` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章作者',
  `introduction` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章简介',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '正文',
  `title` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `keyword` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '关键词',
  `head_photo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT 'default.jpg' COMMENT '文章图片',
  `status` int(2) NULL DEFAULT 0 COMMENT '文章状态 (0草稿，1待审核，2.审核通过，3审核失败)',
  `comments` int(8) NULL DEFAULT 0 COMMENT '评论总数',
  `thumbs` int(8) NULL DEFAULT 0 COMMENT '点赞总数',
  `submit_time` datetime(0) NULL DEFAULT NULL COMMENT '文章提交审核日期',
  `publish_time` datetime(0) NULL DEFAULT NULL COMMENT '文章发布日期',
  `add_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '文章生成日期',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 48 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (17, 2, 1, 'admin', '最近学习servlet的过程中发现了一个很怪的问题， 百度上面搜索这个问题也几乎都是错误的理解。那就是有关servlet在什么时候摧毁，回答很多是服务器关闭或者执行destory方法。服务器关闭ser...', '<p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">最近学习servlet的过程中发现了一个很怪的问题， 百度上面搜索这个问题也几乎都是错误的理解。那就是有关servlet在什么时候摧毁，回答很多是服务器关闭或者执行destory方法。服务器关闭servlet肯定会销毁，但是执行destory并不会销毁servlet。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">我尝试手动调用destory方法。然后再去调用GET方法。发现还是会执行get， 也就是说执行了destory方法并不会销毁servlet。我就怀疑是不是服务器重新创建了一个servlet。然后我继续测试</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">用ajax测试的结果：</p><pre style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">本次请求的方式为：PUT本次请求的方式为：GET本次请求的方式为：DESTORYservlet.IndexServlet@36cfac98正在销毁servlet。。。\r\n本次请求的方式为：GET\r\n本次请求的方式为：DESTORY\r\nservlet.IndexServlet@36cfac98\r\n正在销毁servlet。。。</pre><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">打印了servlet的地址，发现前后是同一个servlet。所以servlet并没有销毁。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">断点跟踪发现super.destory()是一个空方法。</p><pre style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">//方法写在GenericServlet类中。public&nbsp;void&nbsp;destroy()&nbsp;{\r\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">也就是这个方法并不是真正销毁servlet。所以我的理解是：</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">服务器关闭或者销毁servlet的时候会执行destory方法告知使用者，我要销毁这个servlet了。而我们手动执行destory方法并不会真的销毁servlet。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">如理解错误望告知！谢谢。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">注明：<a href=\"http://www.welcom212.com/wordpress\" title=\"\" style=\"color: rgb(0, 166, 124); text-decoration-line: none;\">212博客</a>&nbsp;»&nbsp;<a href=\"http://www.welcom212.com/wordpress/?p=393\" title=\"\" style=\"color: rgb(0, 166, 124); text-decoration-line: none;\">servlet中destory方法的误解</a></p><p><br/></p>', 'servlet中destory方法的误解', 'java', 'at30dbef7f-b127-4da4-8f41-7c5fafb2b418.jpg', 2, 0, 0, NULL, '2019-02-07 13:56:11', '2018-08-23 15:21:27', '2019-02-11 11:13:21');
INSERT INTO `article` VALUES (18, 5, 2, 'qyd2', 'n皇后问题-回溯法求解1.算法描述在n×n格的国际象棋上摆放n个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。n皇后是由八皇后问题演变而来的。该问题是国际...', '<h1 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">n皇后问题-回溯法求解</h1><hr/><h2 style=\"margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 4px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">1.算法描述</h2><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">在n×n格的国际象棋上摆放n个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\"><img class=\"size-medium wp-image-376 aligncenter\" src=\"/ueditor/jsp/upload/image/20180823/1535008974261065144.png\" alt=\"\" width=\"251\" height=\"300\"/><br/></p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">n皇后是由八皇后问题演变而来的。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。</p><h2 style=\"margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 4px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">2.算法分析</h2><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">随着计算机的普及和发展，以前人们无法解决的问题，计算机可以简单计算出来。而且思路十分清晰，那就是暴力求解，遍历所有情况，然后计算出解的个数。</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">2.1 回溯法</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">2.2 回溯法思路</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">用数组模拟棋盘，从第一行开始，依次选择位置， 如果当前位置满足条件，则向下选位置， 如果不满足条件，那么当前位置后移一位。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">最后一个不满足，回溯到上一行， 选下个位置，继续试探。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\"><img class=\"aligncenter wp-image-378 size-full\" src=\"/ueditor/jsp/upload/image/20180823/1535008974948086706.png\" alt=\"\" width=\"575\" height=\"66\"/></p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\"><img class=\"aligncenter wp-image-379 size-full\" src=\"/upload/articlepic/20180823/1535008975026024686.png\" alt=\"\" width=\"639\" height=\"54\"/></p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">其实并不需要一个n*n的数组，我们只需要一个n长度的数组来存位置。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">表示方式： arr[i] = k; 表示： 第i行的第k个位置放一个皇后。这样一个arr[n]的数组就可以表示一个可行解， 由于回溯，我们就可以求所有解。</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">2.3 n皇后回溯求解</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">因为八皇后不能在同行，同列， 同斜线。</p><ol style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>每一行放一个皇后，就解决了不在同行的问题。</p></li><li><p>在第i行的时候，遍历n列，试探位置。和之前所有行放的位置进行比较。</p></li><li><p>比较列：当前列col 不等于 之前 所有列。 即col != arr[i].</p></li><li><p>比较斜线， 因为不再同一斜率为1或者-1的斜线。(row – i) / (col – arr[i]) != 1 或 -1 可以取巧用绝对值函数: abs(row-i) != abs(col-arr[i])</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">我们可以提取比较方法：</p><pre style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">public&nbsp;boolean&nbsp;comp(int&nbsp;row,&nbsp;int&nbsp;col){&nbsp;&nbsp;&nbsp;//当前行和列\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;row;&nbsp;i++)&nbsp;&nbsp;//比较之前row&nbsp;-1&nbsp;列。\r\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(col&nbsp;==&nbsp;arr[i]&nbsp;||&nbsp;abs(row-i)&nbsp;!=&nbsp;abs(col-arr[i]))&nbsp;&nbsp;//如果在同一列，同一斜线\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\r\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">比较函数写完后， 就只剩下回溯过程， 我们采用递归的方式回溯，比较好理解。</p><pre style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">//当前层&nbsp;&nbsp;rowfor&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++){&nbsp;&nbsp;if(comp(row,&nbsp;i)){\r\n&nbsp;&nbsp;&nbsp;&nbsp;arr[row]&nbsp;=&nbsp;i;&nbsp;&nbsp;&nbsp;&nbsp;//同样方式遍历下一层。&nbsp;row&nbsp;+&nbsp;1\r\n&nbsp;&nbsp;}\r\n}</pre><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">2.4 时间复杂度</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">递归n行， 每次循环 n 列， 比较 0～n-1 次。 n * n * (n – 1) / 2.<br/>也就是 O（n^3）. 哇塞，真暴力。</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">2.5 空间复杂度</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">因为只用了arr[n]的数组，也就是O(n).</p><h2 style=\"margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 4px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">3.代码实现</h2><pre style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">public&nbsp;class&nbsp;NQueen&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;n;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;long&nbsp;count;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int[]&nbsp;arr;//&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;nn;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;NQueen(int&nbsp;n){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.n&nbsp;=&nbsp;n;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nn&nbsp;=&nbsp;(1&nbsp;&lt;&lt;&nbsp;n)&nbsp;-&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr&nbsp;=&nbsp;new&nbsp;int[n];\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;row&nbsp;col&nbsp;&nbsp;&nbsp;i&nbsp;&nbsp;arr[i]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;col\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;Check(int&nbsp;row,&nbsp;int&nbsp;col){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;row;&nbsp;i++){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(col&nbsp;==&nbsp;arr[i]&nbsp;||&nbsp;Math.abs(row&nbsp;-&nbsp;i)&nbsp;==&nbsp;Math.abs(col&nbsp;-&nbsp;arr[i]))&nbsp;//在同一列或者在同一斜线。一定不在同一行\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;FindNQueen(int&nbsp;k)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(k&nbsp;==&nbsp;n)&nbsp;{&nbsp;&nbsp;&nbsp;//求出一种解，&nbsp;count+1\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Check(k,&nbsp;i))&nbsp;{&nbsp;&nbsp;&nbsp;//检查是否满足条件\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[k]&nbsp;=&nbsp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//记录\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindNQueen(k&nbsp;+&nbsp;1);&nbsp;&nbsp;&nbsp;//递归查找\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String&nbsp;args[]){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NQueen&nbsp;nQueen&nbsp;=&nbsp;new&nbsp;NQueen(13);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nQueen.FindNQueen(0);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(nQueen.count);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><h2 style=\"margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 4px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">4. 拓展，位运算+回溯法实现</h2><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">虽然计算机算的很快，但是上诉方法实在是太慢了， java就更慢了。如何网上就有大佬给出了位运算求解。精妙的不行。</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">4.1 算法思路</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">我们不再用数组来存储位置，而是用一个整数k，k一开始等于0. 不是普通的0.我们也不比较了，直接用两个整数l和r 记录在斜线在当前行不能走的位置。如果是n皇后， 那么用一个整数 nn = 1 &lt;&lt; n 表示结束。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">举个栗子吧： 8皇后问题。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">初始化 那么我们就变成二进制的角度来看这些初始化的数据吧。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">k = 00000000, l = 00000000, r = 00000000; nn = 11111111; (&lt;- 8个0 8个1)</p><ol style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>k: 每个位置i的0表示没有皇后，1表示在第i个位置放了一个皇后。</p></li><li><p>l: 0表示之前所有的列中放的皇后斜率为-1的线上没有涉及这个位置， 1 表示涉及到了，不能放皇后</p></li><li><p>r: 同l， 所有斜率为1的线涉及的位置。</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">l和r的实现：</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">比如k = 00110001. 我要在第4个为位置放一个皇后， 假设l和r都没有涉及这个位置。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">那么这个位置x= 00001000.</p><ol style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>k = (k &amp; x) = 00111001.</p></li><li><p>l = (l &amp; x) &lt;&lt; 1.</p></li><li><p>r = (r &amp; x) &gt;&gt; 1.</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">假设l = 00110001， r = 00100010.下一行，l表示斜率为-1不能放的位置， 那么第i+1行 l 中所有为1的数字都需要向左移动一位，r需要向右移动一位。 l &amp; x 也就是加上当前选中的位置一起移动。</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">4.2代码实现</h3><pre style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">&nbsp;&nbsp;&nbsp;//k&nbsp;&nbsp;当前已走了多少个位置。&nbsp;&nbsp;&nbsp;l&nbsp;左斜线不能走的位置，&nbsp;r&nbsp;右斜线不能走的位置。\r\n&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;FindNQueen(int&nbsp;k,&nbsp;int&nbsp;l,&nbsp;int&nbsp;r){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(k&nbsp;==&nbsp;nn){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;z&nbsp;=&nbsp;nn&nbsp;&amp;&nbsp;(~(k&nbsp;|&nbsp;l&nbsp;|&nbsp;r));&nbsp;&nbsp;//能走的位置，&nbsp;和nn取并可以去掉前面多余的1\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(z&nbsp;!=&nbsp;0){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;z&nbsp;&amp;&nbsp;(~z+1);&nbsp;&nbsp;&nbsp;//最右边的一个1，&nbsp;即要放皇后的位置。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-=&nbsp;index;&nbsp;&nbsp;&nbsp;//去掉这个位置。\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindNQueen(k&nbsp;|&nbsp;index,&nbsp;(l|index)&lt;&lt;1,&nbsp;(r|index)&gt;&gt;1);&nbsp;&nbsp;&nbsp;//查找下一个。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">4.3 算法分析</h3><ol style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>时间复杂度，遍历n行， 每行n列. O(n^2). emmm 快了不少。</p></li><li><p>空间复杂度，只用了几个变量， O(1).</p></li></ol><h2 style=\"margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 4px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">5. 展望</h2><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">其实还有其他方式和更快的方式求解，比如位运算+多线程， 还有号称时间复杂度为O(1)，利用数学公式的构造法求解。扶我起来，我要继续学。</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">注明：<a href=\"http://www.welcom212.com/wordpress\" title=\"\" style=\"color: rgb(0, 166, 124); text-decoration-line: none;\">212博客</a>&nbsp;»&nbsp;<a href=\"http://www.welcom212.com/wordpress/?p=373\" title=\"\" style=\"color: rgb(0, 166, 124); text-decoration-line: none;\">n皇后问题-回溯法求解</a></p><p></p><p><br/></p>', ' n皇后问题-回溯法求解', '算法', 'atb6519f83-0f1c-423f-9f53-80c12093afc5.jpg', 2, 2, 5, NULL, '2019-02-07 13:56:11', '2018-08-23 15:23:29', '2019-02-04 11:13:26');
INSERT INTO `article` VALUES (19, 5, 15, '苏宏鹏', '堆的定义堆（英语：heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：堆中某个节点的值总是不大于或不小于其父节点的值；堆总是一棵完全二叉树。大...', '<h2 style=\"margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 4px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">堆的定义</h2><blockquote style=\"margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background-color: rgb(250, 252, 249); font-size: 14px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\"><p style=\"margin-top: 6px; padding: 0px;\">堆（英语：heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：堆中某个节点的值总是不大于或不小于其父节点的值；堆总是一棵完全二叉树。</p></blockquote><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">大根堆</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">将根节点最大的堆叫做最大堆或大根堆，在这颗完全二叉树中,所有根节点都大于两个子节点.</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\"><img class=\"aligncenter wp-image-351 size-full\" src=\"/ueditor/jsp/upload/image/20180823/1535009453506075266.png\" alt=\"\" width=\"409\" height=\"165\"/></p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">小根堆</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">根节点最小的堆叫做最小堆或小根堆。在这颗完全二叉树中,所有根节点都小于两个子节点.</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\"><img class=\"aligncenter wp-image-350 size-full\" src=\"/ueditor/jsp/upload/image/20180823/1535009453595088123.png\" alt=\"\" width=\"418\" height=\"195\"/></p><h4 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 15px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">堆的定义如下：</h4><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。 小根堆: (ki &lt;= k2i,ki &lt;= k2i+1)或者 大根堆: (ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)</p><h3 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 16px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">堆排序</h3><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">给定一个大根堆的二叉树. 每次将堆顶元素取出, 放入有序集合. 将堆低元素放入堆顶,重新将该树构造大根堆,重复上诉过程,即可得到一个有序集合.</p><h4 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 15px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">算法思路:</h4><ol style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>构造大根堆.</p></li><li><p>取堆顶元素(即最大值)放入有序集合中, 将堆低元素放入堆顶,此时该二叉树可能不满足堆,故需要重新构建堆.</p></li><li><p>重复步骤2,直到构造完成.</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">&nbsp;</p><h4 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 15px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">代码实现:<code style=\"padding: 2px 4px; color: rgb(221, 17, 68); border-radius: 3px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important; background-color: rgb(251, 251, 251); border: 1px solid rgb(225, 225, 232); white-space: nowrap; font-size: 14px;\"></code><code style=\"padding: 2px 4px; color: rgb(221, 17, 68); border-radius: 3px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important; background-color: rgb(251, 251, 251); border: 1px solid rgb(225, 225, 232); white-space: nowrap; font-size: 14px;\"></code></h4><pre class=\"pure-highlightjs\" style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;调整堆\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;poi&nbsp;需要调整的数字位置&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;a&nbsp;数组-&gt;&nbsp;模拟堆&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;len&nbsp;数组长度,&nbsp;堆元素个数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;adjustHeap(int&nbsp;poi,&nbsp;int&nbsp;a[],&nbsp;int&nbsp;len){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;temp&nbsp;=&nbsp;a[poi];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;poi*2+1;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i=i*2+1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i+1&nbsp;&lt;&nbsp;len&nbsp;&amp;&amp;&nbsp;a[i]&nbsp;&lt;&nbsp;a[i+1])&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(temp&nbsp;&lt;&nbsp;a[i]){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[poi]&nbsp;=&nbsp;a[i];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poi&nbsp;=&nbsp;i;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[poi]&nbsp;=&nbsp;temp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;*&nbsp;堆排序&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;a&nbsp;数组-&gt;&nbsp;模拟堆&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;len&nbsp;数组长度,&nbsp;堆元素个数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;heapsort(int&nbsp;a[],&nbsp;int&nbsp;len){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i&nbsp;=&nbsp;len/2-1;&nbsp;i&nbsp;&gt;=&nbsp;0;&nbsp;i--){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adjustHeap(i,&nbsp;a,&nbsp;len);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i&nbsp;=&nbsp;len-1;&nbsp;i&nbsp;&gt;&nbsp;0;&nbsp;i--){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;temp&nbsp;=&nbsp;a[0];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[0]&nbsp;=&nbsp;a[i];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;=&nbsp;temp;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adjustHeap(0,&nbsp;a,&nbsp;i);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">&nbsp;</p><h4 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 15px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">构造大根堆分析:</h4><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">由于二叉树的叶子节点数为: n0 = (n+1)/2 //该除2是不会计算小数,也就是计算机中的除2</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">所以非叶子节点树为: n1 = n – n0 = n/2. //在计算机语言中是n/2</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">由于数组是从0开始, 所以我们需要构造大根堆时是从n/2 -1 到 0,即构造所有非叶子节点.</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">&nbsp;</p><h5 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">算法分析:</h5><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">时间复杂度: O(nlog(n))</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">总时间复杂度: O(nlog(n))</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">初始化大根堆时间复杂度分析:</p><pre class=\"html\" style=\"padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 10px; font-size: 14px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; text-indent: 30px; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important;\">树的深度:&nbsp;k&nbsp;=&nbsp;log(n)&nbsp;&nbsp;=&gt;&nbsp;2^k&nbsp;=&nbsp;n\r\n\r\n&nbsp;&nbsp;最坏的情况在第i层&nbsp;&nbsp;有2^(i-1)&nbsp;个节点,&nbsp;往下k-i次替换.&nbsp;&nbsp;所以时间复杂度:&nbsp;\r\ns&nbsp;=&nbsp;2^(i-1)&nbsp;*&nbsp;(k-i)&nbsp;&nbsp;|&nbsp;&nbsp;i&nbsp;-&gt;&nbsp;(k-1&nbsp;~&nbsp;1)\r\n展开:&nbsp;&nbsp;s&nbsp;=&nbsp;2^(k-2)&nbsp;*&nbsp;1&nbsp;+&nbsp;2^(k-3)&nbsp;*&nbsp;2&nbsp;+&nbsp;2^(k-4)&nbsp;*&nbsp;3&nbsp;+&nbsp;...&nbsp;+&nbsp;2^0&nbsp;*&nbsp;(k-1)\r\n两边同时乘2:&nbsp;&nbsp;2s&nbsp;=&nbsp;2^(k-1)&nbsp;&nbsp;+&nbsp;2^(k-2)&nbsp;*&nbsp;2&nbsp;+&nbsp;2^(k-3)&nbsp;*&nbsp;3&nbsp;+&nbsp;...&nbsp;+&nbsp;2^1&nbsp;*&nbsp;(k-1)\r\n2式减1式:&nbsp;s&nbsp;=&nbsp;(2^(k-1)&nbsp;+&nbsp;2^(k-2)&nbsp;+&nbsp;2^(k-3)&nbsp;+&nbsp;...&nbsp;+&nbsp;2^1)&nbsp;-&nbsp;(k-1)&nbsp;=&nbsp;&nbsp;2*(1-2^(k-1))/(1-2)&nbsp;-&nbsp;(k-1)&nbsp;=&nbsp;2^k&nbsp;-&nbsp;k&nbsp;-&nbsp;1\r\n所以s的时间复杂度:&nbsp;n&nbsp;-&nbsp;log(n)&nbsp;-&nbsp;1&nbsp;&nbsp;=&gt;&nbsp;&nbsp;O(n)</pre><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">总时间复杂度:</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">循环n-1次,最坏的情况每次都从1到k, 每层都换,也就是log(n)次, 所以时间复杂度为: (n-1) * log(n)</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">所以总时间复杂度: O(nlog(n)).</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">空间复杂度:O(1)</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">稳定性: 不稳定的排序算法.</p><h4 style=\"margin: 5px 0px; line-height: 35px; color: rgb(85, 85, 85); text-rendering: optimizeLegibility; font-size: 15px; font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-indent: 30px; white-space: normal;\">作用:</h4><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">堆排序可以用来排序, 但大多数时候不如快排</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">可是当数据量巨大, 如百万级别的时候, 快排的递归调用可能会使堆栈溢出.而堆排序O(1)的空间复杂度,还没有递归调用, 就十分合适了.</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">还可以用来实现优先队列.</p><p style=\"margin-top: 0px; margin-bottom: 15px; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; text-indent: 30px; white-space: normal;\">注明：<a href=\"http://www.welcom212.com/wordpress\" title=\"\" style=\"color: rgb(0, 166, 124); text-decoration-line: none;\">212博客</a>&nbsp;»&nbsp;<a href=\"http://www.welcom212.com/wordpress/?p=347\" title=\"\" style=\"color: rgb(0, 166, 124); text-decoration-line: none;\">堆排序</a></p><p><br/></p>', ' 堆排序', '算法', 'at786003d2-7643-44f5-ab88-b1e976da34ef.jpg', 2, 3, 0, NULL, '2019-02-07 22:56:22', '2018-08-23 15:31:21', '2019-02-08 11:13:31');
INSERT INTO `article` VALUES (20, 2, 16, 'test1', '测试标题图片如图：@RequestMapping(value = \"getLogUser\",produces = \"application/json;charset=utf-8\")@ResponseB...', '<h1 style=\"font-size: 32px; font-weight: bold; border-bottom: 2px solid rgb(204, 204, 204); padding: 0px 4px 0px 0px; text-align: left; margin: 0px 0px 10px;\">测试标题</h1><p><br/></p><p>图片如图：</p><p><img src=\"/upload/articlepic/20180823/1535027173583000121.jpg\" title=\"1535027173583000121.jpg\" alt=\"00014.jpg\"/></p><p><br/></p><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;DejaVu Sans Mono&#39;;font-size:12.0pt;\">(=&nbsp;=&nbsp;)\r\nString&nbsp;(HttpSession&nbsp;session){\r\n&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;(User)session.getAttribute()JSON.=&nbsp;String&nbsp;jsonUser&nbsp;=&nbsp;JSON.(userSerializerFeature.)jsonUser}\r\n\r\n(=&nbsp;=&nbsp;)\r\nString&nbsp;(Integer&nbsp;uidHttpSession&nbsp;session){\r\n&nbsp;&nbsp;&nbsp;&nbsp;BlogInfo&nbsp;blogInfo&nbsp;=&nbsp;BlogInfo()User&nbsp;user&nbsp;=&nbsp;(User)session.getAttribute()Integer&nbsp;userid&nbsp;=&nbsp;user.getUserId()List&lt;Article&gt;&nbsp;articleList&nbsp;=&nbsp;.selectAllByUserid(userid)blogInfo.setLogUser(user)blogInfo.setArticles(articleList)JSON.=&nbsp;String&nbsp;jsonData&nbsp;=&nbsp;JSON.(blogInfoSerializerFeature.)jsonData}</pre><p>代码如上</p>', 'test', 'java', 'at0826e09c-1b18-4c4f-b580-085d03eebe3c.jpg', 2, 1, 0, NULL, '2019-02-07 13:56:11', '2018-08-23 20:26:52', '2019-02-11 11:13:21');
INSERT INTO `article` VALUES (21, 3, 17, 'test2', '从前有做灵剑山$(function () {    $.ajax({        url: \"/BlogRoom/article/getAll\",        dataType: \"json\", ...', '<p>从前有做灵剑山</p><p><img src=\"http://img.baidu.com/hi/jx2/j_0075.gif\"/><img src=\"http://img.baidu.com/hi/jx2/j_0023.gif\"/></p><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;DejaVu Sans Mono&#39;;font-size:12.0pt;\">(()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;.({\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;:&nbsp;:&nbsp;:&nbsp;(data)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;().()articlenode(i&nbsp;=&nbsp;i&nbsp;&lt;&nbsp;data.i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article&nbsp;=&nbsp;data[i].articleauthor&nbsp;=&nbsp;data[i].authorarticlenode&nbsp;=&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.articleId&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;article.+&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.articleId&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.articleDescribe&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;author.userId&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;author.+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.articleTime&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.articleId+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.commentCount&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;article.thumbsCount+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;().(articlenode)}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pagenode&nbsp;=&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;().(pagenode)}\r\n&nbsp;&nbsp;&nbsp;&nbsp;})})</pre><p><br/></p>', 'test123', 'javacript', 'at7cd7e54d-ce23-4c13-8eaf-42ce3be4c84b.jpg', 2, 4, 5, NULL, '2019-02-07 13:56:11', '2018-08-24 11:12:19', '2019-02-04 11:13:26');
INSERT INTO `article` VALUES (22, 2, 18, 'shp', '一个好的讲解mybatis的博客地址http://www.jianshu.com/nb/5226994引言对于使用Mybatis时，最头痛的就是写分页，需要先写一个查询count的select语句，然...', '<p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; font-family: &quot;Microsoft YaHei&quot;; font-size: 16px;\">一个好的讲解mybatis的博客地址<a href=\"http://www.jianshu.com/nb/5226994\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://www.jianshu.com/nb/5226994</a></span></p><h3 style=\"padding: 8px 0px 5px 5px; font-size: 18px; line-height: 25px; background: rgb(43, 102, 149); border-radius: 6px; box-shadow: rgb(95, 90, 75) 0px 0px 0px 1px, rgba(10, 10, 0, 0.5) 1px 1px 6px 1px; color: rgb(255, 255, 255); font-family: 微软雅黑, 宋体, 黑体, Arial; height: 25px; text-shadow: rgb(34, 34, 34) 2px 2px 3px; white-space: normal; margin: 18px 0px !important;\">引言</h3><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">对于使用Mybatis时，最头痛的就是写分页，需要先写一个查询count的select语句，然后再写一个真正分页查询的语句，当查询条件多了之后，会发现真不想花双倍的时间写count和select，</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">如下就是项目在没有使用分页插件的时候的语句</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&lt;!--&nbsp;根据查询条件获取查询获得的数据量&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;select&nbsp;id=&quot;size&quot;&nbsp;parameterType=&quot;Map&quot;&nbsp;resultType=&quot;Long&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;count(*)&nbsp;from&nbsp;help_assist_student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;where&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;stuId&nbsp;!=&nbsp;null&nbsp;and&nbsp;stuId&nbsp;!=&nbsp;&#39;&#39;&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;stu_id&nbsp;like\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONCAT(CONCAT(&#39;%&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{stuId,jdbcType=VARCHAR}),&#39;%&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;name&nbsp;!=&nbsp;null&nbsp;and&nbsp;name&nbsp;!=&nbsp;&#39;&#39;&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;name&nbsp;like\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONCAT(CONCAT(&#39;%&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{name,jdbcType=VARCHAR}),&#39;%&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;deptId&nbsp;!=&nbsp;null&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;dept_id&nbsp;in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;foreach&nbsp;item=&quot;item&quot;&nbsp;index=&quot;index&quot;&nbsp;collection=&quot;deptId&quot;&nbsp;open=&quot;(&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;separator=&quot;,&quot;&nbsp;close=&quot;)&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{item}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/foreach&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;bankName&nbsp;!=&nbsp;null&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;bank_name&nbsp;in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;foreach&nbsp;item=&quot;item&quot;&nbsp;index=&quot;index&quot;&nbsp;collection=&quot;bankName&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open=&quot;(&quot;&nbsp;separator=&quot;,&quot;&nbsp;close=&quot;)&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{item}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/foreach&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/where&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;分页查询获取获取信息&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;select&nbsp;id=&quot;selectByPageAndSelections&quot;&nbsp;parameterType=&quot;cn.edu.uestc.smgt.common.QueryBase&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultMap=&quot;BaseResultMap&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;*&nbsp;from&nbsp;help_assist_student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;where&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;parameters.stuId&nbsp;!=&nbsp;null&nbsp;and&nbsp;parameters.stuId&nbsp;!=&nbsp;&#39;&#39;&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;stu_id&nbsp;like\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONCAT(CONCAT(&#39;%&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{parameters.stuId,jdbcType=VARCHAR}),&#39;%&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;parameters.name&nbsp;!=&nbsp;null&nbsp;and&nbsp;parameters.name&nbsp;!=&nbsp;&#39;&#39;&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;name&nbsp;like\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONCAT(CONCAT(&#39;%&#39;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{parameters.name,jdbcType=VARCHAR}),&#39;%&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;parameters.deptId&nbsp;!=&nbsp;null&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;dept_id&nbsp;in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;foreach&nbsp;item=&quot;item&quot;&nbsp;index=&quot;index&quot;&nbsp;collection=&quot;parameters.deptId&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open=&quot;(&quot;&nbsp;separator=&quot;,&quot;&nbsp;close=&quot;)&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{item}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/foreach&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&nbsp;test=&quot;parameters.bankName&nbsp;!=&nbsp;null&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;bank_name&nbsp;in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;foreach&nbsp;item=&quot;item&quot;&nbsp;index=&quot;index&quot;&nbsp;collection=&quot;parameters.bankName&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open=&quot;(&quot;&nbsp;separator=&quot;,&quot;&nbsp;close=&quot;)&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#{item}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/foreach&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/where&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order&nbsp;by&nbsp;dept_id,stu_id\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit&nbsp;#{firstRow},#{pageSize}&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">可以发现，重复的代码太多，虽然说复制粘贴简单的很，但是文件的长度在成倍的增加，以后翻阅代码的时候头都能大了。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">于是希望只写一个select语句，count由插件根据select语句自动完成。找啊找啊，发现PageHelper<a href=\"https://github.com/pagehelper/Mybatis-PageHelper\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">https://github.com/pagehelper/Mybatis-PageHelper</a>&nbsp;符合要求,于是就简单的写了一个测试项目</p><h3 style=\"padding: 8px 0px 5px 5px; font-size: 18px; line-height: 25px; background: rgb(43, 102, 149); border-radius: 6px; box-shadow: rgb(95, 90, 75) 0px 0px 0px 1px, rgba(10, 10, 0, 0.5) 1px 1px 6px 1px; color: rgb(255, 255, 255); font-family: 微软雅黑, 宋体, 黑体, Arial; height: 25px; text-shadow: rgb(34, 34, 34) 2px 2px 3px; white-space: normal; margin: 18px 0px !important;\">1，配置分页插件：</h3><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">直接从官网上copy的如下：</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">Config&nbsp;PageHelper\r\n\r\n1.&nbsp;Using&nbsp;in&nbsp;mybatis-config.xml&lt;!--&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;In&nbsp;the&nbsp;configuration&nbsp;file,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;plugins&nbsp;location&nbsp;must&nbsp;meet&nbsp;the&nbsp;requirements&nbsp;as&nbsp;the&nbsp;following&nbsp;order:\r\n&nbsp;&nbsp;&nbsp;&nbsp;properties?,&nbsp;settings?,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;typeAliases?,&nbsp;typeHandlers?,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;objectFactory?,objectWrapperFactory?,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;plugins?,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;environments?,&nbsp;databaseIdProvider?,&nbsp;mappers?--&gt;&lt;plugins&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&nbsp;interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;config&nbsp;params&nbsp;as&nbsp;the&nbsp;following&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;param1&quot;&nbsp;value=&quot;value1&quot;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt;&lt;/plugins&gt;2.&nbsp;Using&nbsp;in&nbsp;Spring&nbsp;application.xml\r\n\r\nconfig&nbsp;org.mybatis.spring.SqlSessionFactoryBean&nbsp;as&nbsp;following:&lt;bean&nbsp;id=&quot;sqlSessionFactory&quot;&nbsp;class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\r\n&nbsp;&nbsp;&lt;!--&nbsp;other&nbsp;configuration&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;property&nbsp;name=&quot;plugins&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;array&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;properties&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;config&nbsp;params&nbsp;as&nbsp;the&nbsp;following&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param1=value1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/array&gt;\r\n&nbsp;&nbsp;&lt;/property&gt;&lt;/bean&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">我使用第一中方法：</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&lt;!--&nbsp;配置分页插件&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&nbsp;interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;设置数据库类型&nbsp;Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;helperDialect&quot;&nbsp;value=&quot;mysql&quot;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">其余的关于mybatis整合spring的内容就不用提了。</p><h3 style=\"padding: 8px 0px 5px 5px; font-size: 18px; line-height: 25px; background: rgb(43, 102, 149); border-radius: 6px; box-shadow: rgb(95, 90, 75) 0px 0px 0px 1px, rgba(10, 10, 0, 0.5) 1px 1px 6px 1px; color: rgb(255, 255, 255); font-family: 微软雅黑, 宋体, 黑体, Arial; height: 25px; text-shadow: rgb(34, 34, 34) 2px 2px 3px; white-space: normal; margin: 18px 0px !important;\">2，编写mapper.xml文件</h3><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">测试工程就不复杂了，简单的查询一个表，没有条件</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&lt;select&nbsp;id=&quot;selectByPageAndSelections&quot;&nbsp;resultMap=&quot;BaseResultMap&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;doc\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORDER&nbsp;BY&nbsp;doc_abstract&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">然后在Mapper.java中编写对应的接口</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">public&nbsp;List&lt;Doc&gt;&nbsp;selectByPageAndSelections();</pre><h3 style=\"padding: 8px 0px 5px 5px; font-size: 18px; line-height: 25px; background: rgb(43, 102, 149); border-radius: 6px; box-shadow: rgb(95, 90, 75) 0px 0px 0px 1px, rgba(10, 10, 0, 0.5) 1px 1px 6px 1px; color: rgb(255, 255, 255); font-family: 微软雅黑, 宋体, 黑体, Arial; height: 25px; text-shadow: rgb(34, 34, 34) 2px 2px 3px; white-space: normal; margin: 18px 0px !important;\">3，分页</h3><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">@Servicepublic&nbsp;class&nbsp;DocServiceImpl&nbsp;implements&nbsp;IDocService&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;DocMapper&nbsp;docMapper;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;PageInfo&lt;Doc&gt;&nbsp;selectDocByPage1(int&nbsp;currentPage,&nbsp;int&nbsp;pageSize)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PageHelper.startPage(currentPage,&nbsp;pageSize);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Doc&gt;&nbsp;docs&nbsp;=&nbsp;docMapper.selectByPageAndSelections();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PageInfo&lt;Doc&gt;&nbsp;pageInfo&nbsp;=&nbsp;new&nbsp;PageInfo&lt;&gt;(docs);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;pageInfo;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">参考文档说明，我使用了PageHelper.startPage(currentPage, pageSize);</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">我认为这种方式不入侵mapper代码。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">其实一开始看到这段代码时候，我觉得应该是内存分页。其实插件对mybatis执行流程进行了增强，添加了limit以及count查询，属于物理分页</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">再粘贴一下文档说明中的一段话</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"/upload/articlepic/20180824/1535095105534079071.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">4.&nbsp;什么时候会导致不安全的分页？\r\n\r\nPageHelper&nbsp;方法使用了静态的&nbsp;ThreadLocal&nbsp;参数，分页参数和线程是绑定的。\r\n\r\n只要你可以保证在&nbsp;PageHelper&nbsp;方法调用后紧跟&nbsp;MyBatis&nbsp;查询方法，这就是安全的。因为&nbsp;PageHelper&nbsp;在&nbsp;finally&nbsp;代码段中自动清除了&nbsp;ThreadLocal&nbsp;存储的对象。\r\n\r\n如果代码在进入&nbsp;Executor&nbsp;前发生异常，就会导致线程不可用，这属于人为的&nbsp;Bug（例如接口方法和&nbsp;XML&nbsp;中的不匹配，导致找不到&nbsp;MappedStatement&nbsp;时），&nbsp;这种情况由于线程不可用，也不会导致&nbsp;ThreadLocal&nbsp;参数被错误的使用。\r\n\r\n但是如果你写出下面这样的代码，就是不安全的用法：\r\n\r\nPageHelper.startPage(1,&nbsp;10);\r\nList&lt;Country&gt;&nbsp;list;\r\nif(param1&nbsp;!=&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;=&nbsp;countryMapper.selectIf(param1);\r\n}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Country&gt;();\r\n}\r\n这种情况下由于&nbsp;param1&nbsp;存在&nbsp;null&nbsp;的情况，就会导致&nbsp;PageHelper&nbsp;生产了一个分页参数，但是没有被消费，这个参数就会一直保留在这个线程上。当这个线程再次被使用时，就可能导致不该分页的方法去消费这个分页参数，这就产生了莫名其妙的分页。\r\n\r\n上面这个代码，应该写成下面这个样子：\r\n\r\nList&lt;Country&gt;&nbsp;list;\r\nif(param1&nbsp;!=&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;PageHelper.startPage(1,&nbsp;10);\r\n&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;=&nbsp;countryMapper.selectIf(param1);\r\n}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Country&gt;();\r\n}\r\n这种写法就能保证安全。\r\n\r\n如果你对此不放心，你可以手动清理&nbsp;ThreadLocal&nbsp;存储的分页参数，可以像下面这样使用：\r\n\r\nList&lt;Country&gt;&nbsp;list;\r\nif(param1&nbsp;!=&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;PageHelper.startPage(1,&nbsp;10);\r\n&nbsp;&nbsp;&nbsp;&nbsp;try{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;=&nbsp;countryMapper.selectAll();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PageHelper.clearPage();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Country&gt;();\r\n}\r\n这么写很不好看，而且没有必要。</pre><p><br/></p>', 'Mybatis分页插件PageHelper简单使用', 'java', 'atfe371d53-ce03-4da0-9f03-415aafa3c763.jpg', 2, 3, 0, NULL, '2019-02-07 13:56:11', '2018-08-24 15:18:52', '2019-02-08 11:13:31');
INSERT INTO `article` VALUES (23, 3, 19, 'qiuyunduo', '  1.JS放在哪<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Title</title></head><body...', '<h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</h1><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</h1><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>1.JS放在哪</h1><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">&lt;!DOCTYPE&nbsp;html&gt;&lt;html&nbsp;lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--&nbsp;浏览器不支持或禁用javascript时该元素显示--&gt;&lt;noscript&gt;&lt;h1&nbsp;&gt;&quot;请支持javascript功能&quot;&lt;/h1&gt;;&lt;/noscript&gt;&lt;!--&nbsp;type&nbsp;one&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action&nbsp;when&nbsp;click&nbsp;--&gt;&lt;a&nbsp;href=&quot;javascript:alert(&#39;hello&nbsp;world!&#39;)&quot;&gt;hello&nbsp;world!&lt;/a&gt;&lt;!--&nbsp;type&nbsp;two&nbsp;--&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;alert(&quot;hello&nbsp;world!&quot;);&lt;/script&gt;&lt;!--&nbsp;type&nbsp;three&nbsp;&nbsp;&nbsp;defer:推迟脚本执行&nbsp;&nbsp;async:启动新线程，异步执行脚本&nbsp;--&gt;&lt;!--&nbsp;两种属性只可用于此种外部脚本文件模式--&gt;&lt;script&nbsp;src=&quot;first.js&quot;&nbsp;type=&quot;text/javascript&quot;&nbsp;defer&nbsp;async&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><hr/><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</h3><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>2.定义变量</h1><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">javascript是弱类型语言，可以不定义变量直接而使用，存在<span style=\"text-decoration:underline;\">显示定义变量</span>（使用关键字var）和<span style=\"text-decoration:underline;\">隐式定义变量</span>两种，变量的数据类型也可随意转变。</p><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;var&nbsp;a&nbsp;=&nbsp;true;b&nbsp;=&nbsp;2;b&nbsp;=&nbsp;false;&lt;/script&gt;</pre><hr/><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</h3><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>3.基本数据类型</h1><h2 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>&nbsp; 3.1 5种基本数据类型</h2><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>&nbsp; &nbsp; &nbsp; 数值类型</p></li></ul><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;//科学计数法var&nbsp;a&nbsp;=&nbsp;3E2;&nbsp;&nbsp;//300var&nbsp;b&nbsp;=&nbsp;2.1e-2;&nbsp;//0.021//整数部分只有0时，可省略var&nbsp;c&nbsp;=&nbsp;0.3;var&nbsp;d&nbsp;=&nbsp;.3;&nbsp;&nbsp;//0.3//非十进制计数var&nbsp;e&nbsp;=&nbsp;0o14;&nbsp;//八进制var&nbsp;f&nbsp;=&nbsp;0x10;&nbsp;//十六进制&lt;/script&gt;</pre><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</h3><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>布尔类型</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;true 或 false</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>&nbsp;字符串类型</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;必须用引号括起来，可为单引号，也可为双引号</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>undefined类型</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">用于表示某个变量或属性不存在，或已创建但未为其分匹配值</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>null类型</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">用于表示变量有值，且为null</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><h2 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>&nbsp;3.2&nbsp; 变量作用域</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">全局变量：函数外定义的 + 函数内不用var定义的 变量</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">局部变量：函数内用var定义的变量</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>局部变量的作用域仅限于该函数，javascript变量不存在块范围；</p></li><li><p>当变量同名时，在局部变量作用域内，局部变量会覆盖全局变量</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><h2 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>&nbsp;<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(124, 121, 229);\"><span style=\"text-decoration:underline;\">3.3&nbsp; 变量提升</span></span>&nbsp;</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">变量提升机制，指的是变量<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(243, 59, 69);\">声明</span>总是被解释器“提升”到<span style=\"text-decoration:underline;\">函数体</span>的顶部。</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>只是提升局部变量</p></li><li><p>只是提升声明部分，不包括赋值部分</p></li><li><p>只要有声明变量的语句都会被提升，不论该语句是否执行或有没有机会执行</p></li></ul><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;var&nbsp;a&nbsp;=&nbsp;&quot;全局变量&quot;;function&nbsp;f(){alert(a);&nbsp;//undefinedvar&nbsp;a&nbsp;=&nbsp;&quot;局部变量&quot;;alert(a);&nbsp;//局部变量}f();&lt;/script&gt;</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">所以以上代码效果等同于如下</p><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;var&nbsp;a&nbsp;=&nbsp;&quot;全局变量&quot;;function&nbsp;f(){var&nbsp;a;&nbsp;//变量声明提升alert(a);&nbsp;//undefineda&nbsp;=&nbsp;&quot;局部变量&quot;;alert(a);&nbsp;//局部变量}f();&lt;/script&gt;</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><h2 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>&nbsp;3.4 let变量</h2><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>let 变量存在块作用域</p></li><li><p>let变量不会自动添加为全局window对象的属性</p></li><li><p>let变量不会提前装载</p></li></ul><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;var&nbsp;a&nbsp;=&nbsp;&quot;全局变量&quot;;function&nbsp;f(){//&nbsp;局部变量a覆盖了全局变量a，故全局变量无效//&nbsp;由于let变量不会提前装载，故此处的a为未定义的变量alert(a);&nbsp;//语法错误let&nbsp;a&nbsp;=&nbsp;&quot;局部变量&quot;;alert(a);&nbsp;//局部变量}f();&lt;/script&gt;</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><h2 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>&nbsp;3.5 const定义变量</h2><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>必须在定义时指定初始值，且以后不能改变值</p></li></ul><hr/><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>4. 复合类型</h1><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;javascript复合类型大致有以下三种：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>Object：对象</p></li><li><p>Array：数组</p></li><li><p>Function：方法</p></li></ul><h2 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>&nbsp; &nbsp;4.1 数组</h2><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>数组长度可变</p></li><li><p>同一个数组的元素类型可互不相同</p></li><li><p>访问数组元素时不存在越界，访问未赋值的数组元素时，该元素值为undefined</p></li></ul><pre class=\"has\" style=\"box-sizing: border-box; outline: 0px; padding: 8px; margin-top: 0px; margin-bottom: 24px; position: relative; white-space: pre-wrap; word-wrap: break-word; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(255, 255, 255);\">//&nbsp;创建数组的三种方式var&nbsp;a&nbsp;=&nbsp;new&nbsp;Array();var&nbsp;b&nbsp;=&nbsp;[];var&nbsp;c&nbsp;=&nbsp;[1,3,true];</pre><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>&nbsp;数组作为栈使用</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; push(e)：元素入栈，返回入栈后数组长度</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; pop()：元素出栈，返回出栈元素</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(255, 187, 102);\">&nbsp;</span><span style=\"text-decoration:underline;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(243, 59, 69);\">入栈还是出栈，都是在数组的下标大的地方操作</span></span></p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p><span style=\"text-decoration:underline;\">数组作为队列使用</span></p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;unshift(e)：元素如队列，返回如队列后数组长度</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;shift()：元素出队列，返回出队列元素</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"text-decoration:underline;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(243, 59, 69);\">入队列还是出队列，都是在数组下标小（0）的地方操作</span></span></p><p><span style=\"text-decoration:underline;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(243, 59, 69);\"><br/></span></span></p><p><br/></p>', 'JavaScript 语法笔记', 'javascript', 'at525e1eee-bd1a-41ca-b5af-8b0fb3dd8099.jpg', 2, 2, 0, NULL, '2019-02-07 13:56:11', '2018-08-24 15:25:03', '2019-02-11 11:13:21');
INSERT INTO `article` VALUES (24, 3, 20, '1', 'application/json类型请求前台请求代码：            $.ajax({                url: \'/add\'                , type: \'P...', '<h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">application/json</span>类型请求</h3><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>前台请求代码：</p></li></ul><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;&#39;/add&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;type:&nbsp;&#39;POST&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;data:&nbsp;JSON.stringify(data.field)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;contentType:&nbsp;&#39;application/json&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;success:&nbsp;function&nbsp;(response)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(response);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.code&nbsp;==&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer.msg(&#39;新增成功！&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer.alert(&#39;新增失败！&#39;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})123456789101112131415</pre><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">后台捕获请求，<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">request.data</span>存储了我们的请求数据&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180110200702769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2FuZ2thbmdsb3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p></li><li><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">后台出处理代码，其中参数d为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">dict</span>类型数据<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">request.data</span></p></li></ul><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">def&nbsp;add_monitor(d):\r\n&nbsp;&nbsp;&nbsp;&nbsp;logger.debug(&#39;add&nbsp;monitor&nbsp;is&nbsp;%s&#39;&nbsp;%&nbsp;d)\r\n&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;json.loads(d)\r\n&nbsp;&nbsp;&nbsp;&nbsp;conn&nbsp;=&nbsp;monitor_db.get_connection_with_url(url)&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Content-Type:&nbsp;application/json\r\n&nbsp;&nbsp;&nbsp;&nbsp;conn.execute(T_Monitor.insert(),&nbsp;[{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;credit_type&#39;:&nbsp;d[&#39;credit_type&#39;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&#39;query_type&#39;:&nbsp;d[&#39;query_type&#39;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&#39;credit_status&#39;:&nbsp;d[&#39;credit_status&#39;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&#39;elapsed_time&#39;:&nbsp;int(random.random()&nbsp;*&nbsp;100)\r\n&nbsp;&nbsp;&nbsp;&nbsp;}])123456789101112</pre><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">application/x-www-form-urlencoded</span>类型请求</h3><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>我们稍微修改下前台发送代码，不指定<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">contentType</span>参数：即指定请求内容格式。注意：<span style=\"color:red\">虽然我们的请求数据是JSON字串，但Ajax中没有指定<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">contentType</span>参数，那么数据请求格式仍旧为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">application/x-www-form-urlencoded</span></span></p></li></ul><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;&#39;/add&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;type:&nbsp;&#39;POST&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;data:&nbsp;JSON.stringify(data.field)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;success:&nbsp;function&nbsp;(response)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(response);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.code&nbsp;==&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer.msg(&#39;新增成功！&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer.alert(&#39;新增失败！&#39;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})12345678910111213</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://img-blog.csdn.net/20180110193435902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2FuZ2thbmdsb3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">通过后台代码调式，我们可以看到<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">request.form</span>存储了前台的请求数据如下：&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180110193851954?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2FuZ2thbmdsb3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">注意上图红框部分：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">request.form</span>是一个<span style=\"color:red\">ImmutableMultiDict类型的对象</span></p></li><li><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">request.form</span>的键值<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">key</span>存储了请求数据的<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">JSON</span>字串</p></li><li><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">request.form</span>的长度为1</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">因此，通过上面的代码分析，我们定义Flask表单处理后台代码实现如下，其中参数d是一个<span style=\"color:red\">ImmutableMultiDict类型对象：</span></p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">#&nbsp;add&nbsp;monitordef&nbsp;add_monitor(d):\r\n&nbsp;&nbsp;&nbsp;&nbsp;logger.debug(&#39;add&nbsp;monitor&nbsp;is&nbsp;%s&#39;&nbsp;%&nbsp;d)\r\n&nbsp;&nbsp;&nbsp;&nbsp;conn&nbsp;=&nbsp;monitor_db.get_connection_with_url(url)&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;key&nbsp;in&nbsp;d.keys():\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.debug(&quot;form&nbsp;data&nbsp;is&nbsp;%s&quot;&nbsp;%&nbsp;json.loads(key))\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d_dict&nbsp;=&nbsp;json.loads(key)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn.execute(T_Monitor.insert(),&nbsp;[{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;credit_type&#39;:&nbsp;d_dict[&#39;credit_type&#39;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&#39;query_type&#39;:&nbsp;d_dict[&#39;query_type&#39;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&#39;credit_status&#39;:&nbsp;d_dict[&#39;credit_status&#39;]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&#39;elapsed_time&#39;:&nbsp;int(random.random()&nbsp;*&nbsp;100)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}])1234567891011121314</pre><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">实现效果</span></h3><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://img-blog.csdn.net/20180110194937433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2FuZ2thbmdsb3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">源码参考</span>：<a href=\"https://github.com/ypmc/flask-sqlalchemy-web\" target=\"_blank\" style=\"box-sizing: border-box; outline: 0px; color: rgb(103, 149, 181); text-decoration-line: none; cursor: pointer; word-break: break-all;\">https://github.com/ypmc/flask-sqlalchemy-web</a></p><p><br/></p>', ' Flask Web开发入门（九）之表单处理', 'html', 'at25a1669c-f27c-4cc9-ac50-b3737953e2e8.jpg', 2, 2, 5, NULL, '2019-02-07 13:56:11', '2018-08-24 15:26:20', '2019-02-04 11:13:26');
INSERT INTO `article` VALUES (25, 3, 1, 'admin', 'windows下python的安装123—–因为我是个真小白，网上的大多入门教程并不适合我这种超级超级小白，有时候还会遇到各种各样的问题，因此记录一下我的安装过程，希望大家都能入门愉快，欢迎指教—–本...', '<h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">windows下python的安装123</h1><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">—–因为我是个真小白，网上的大多入门教程并不适合我这种超级超级小白，有时候还会遇到各种各样的问题，因此记录一下我的安装过程，希望大家都能入门愉快，欢迎指教</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">—–本文针对超级小白，内容可能会引起各路大神不适，请谨慎观看</p><hr/><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">1. 打开官网/www.python.org，选择Downloads</span>&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180116144343196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm1qdXpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/>&nbsp;<br/><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">2. 然后在这里选择要安装的版本3.X.X或者2.X.X</span>&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180116151126963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm1qdXpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/><br/><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">3. 2.X.X和3.X.X的下载</span>（2和3需要下载的文件名字不太一样，需要注意一下下载什么）&nbsp;<br/>（1）2.X.X需要下载windows XXX MSI installer&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180116151605353?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm1qdXpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/><br/>（2）3.X.X需要下载windows XXX executable installer&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180116152219066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm1qdXpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">4. 下载完成后打开，这里我下载的是3.6.4</span>&nbsp;<br/><img src=\"https://img-blog.csdn.net/20180116152415354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm1qdXpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/>&nbsp;</p><p><br/></p>', '真小白入门：python的安装（一）', 'python', 'atbbf1abb3-e7d5-4b83-aa1d-f14e654f6e65.jpg', 2, 4, 0, NULL, '2019-02-07 13:56:11', '2018-08-24 15:27:14', '2019-02-08 11:13:31');
INSERT INTO `article` VALUES (26, 4, 1, 'admin', 'mysql练习题习题是从网上找的练习题，sql语句不太熟练，可能并不是最优解，有不对的地方请大家指正表明和字段学生表 Student(s_id,s_name,s_birth,s_sex) –学生编号,...', '<h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">mysql练习题</h1><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">习题是从网上找的练习题，sql语句不太熟练，可能并不是最优解，有不对的地方请大家指正</p><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>表明和字段</h3><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>学生表 Student(s_id,s_name,s_birth,s_sex) –学生编号,学生姓名, 出生年月,学生性别</p></li><li><p>课程表 Course(c_id,c_name,t_id) – –课程编号, 课程名称, 教师编号</p></li><li><p>教师表 Teacher(t_id,t_name) –教师编号,教师姓名</p></li><li><p>成绩表 Score(s_id,c_id,s_score) –学生编号,课程编号,分数</p></li></ul><h3 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>测试数据</h3><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">--建表--学生表CREATE&nbsp;TABLE&nbsp;`Student`(&nbsp;&nbsp;&nbsp;&nbsp;`s_id`&nbsp;VARCHAR(20),&nbsp;&nbsp;&nbsp;&nbsp;`s_name`&nbsp;VARCHAR(20)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;,&nbsp;&nbsp;&nbsp;&nbsp;`s_birth`&nbsp;VARCHAR(20)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;,&nbsp;&nbsp;&nbsp;&nbsp;`s_sex`&nbsp;VARCHAR(10)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;,&nbsp;&nbsp;&nbsp;&nbsp;PRIMARY&nbsp;KEY(`s_id`)\r\n);--课程表CREATE&nbsp;TABLE&nbsp;`Course`(&nbsp;&nbsp;&nbsp;&nbsp;`c_id`&nbsp;&nbsp;VARCHAR(20),&nbsp;&nbsp;&nbsp;&nbsp;`c_name`&nbsp;VARCHAR(20)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;,&nbsp;&nbsp;&nbsp;&nbsp;`t_id`&nbsp;VARCHAR(20)&nbsp;NOT&nbsp;NULL,&nbsp;&nbsp;&nbsp;&nbsp;PRIMARY&nbsp;KEY(`c_id`)\r\n);--教师表CREATE&nbsp;TABLE&nbsp;`Teacher`(&nbsp;&nbsp;&nbsp;&nbsp;`t_id`&nbsp;VARCHAR(20),&nbsp;&nbsp;&nbsp;&nbsp;`t_name`&nbsp;VARCHAR(20)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;,&nbsp;&nbsp;&nbsp;&nbsp;PRIMARY&nbsp;KEY(`t_id`)\r\n);--成绩表CREATE&nbsp;TABLE&nbsp;`Score`(&nbsp;&nbsp;&nbsp;&nbsp;`s_id`&nbsp;VARCHAR(20),&nbsp;&nbsp;&nbsp;&nbsp;`c_id`&nbsp;&nbsp;VARCHAR(20),&nbsp;&nbsp;&nbsp;&nbsp;`s_score`&nbsp;INT(3),&nbsp;&nbsp;&nbsp;&nbsp;PRIMARY&nbsp;KEY(`s_id`,`c_id`)\r\n);--插入学生表测试数据insert&nbsp;into&nbsp;Student&nbsp;values(&#39;01&#39;&nbsp;,&nbsp;&#39;赵雷&#39;&nbsp;,&nbsp;&#39;1990-01-01&#39;&nbsp;,&nbsp;&#39;男&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;02&#39;&nbsp;,&nbsp;&#39;钱电&#39;&nbsp;,&nbsp;&#39;1990-12-21&#39;&nbsp;,&nbsp;&#39;男&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;03&#39;&nbsp;,&nbsp;&#39;孙风&#39;&nbsp;,&nbsp;&#39;1990-05-20&#39;&nbsp;,&nbsp;&#39;男&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;04&#39;&nbsp;,&nbsp;&#39;李云&#39;&nbsp;,&nbsp;&#39;1990-08-06&#39;&nbsp;,&nbsp;&#39;男&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;05&#39;&nbsp;,&nbsp;&#39;周梅&#39;&nbsp;,&nbsp;&#39;1991-12-01&#39;&nbsp;,&nbsp;&#39;女&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;06&#39;&nbsp;,&nbsp;&#39;吴兰&#39;&nbsp;,&nbsp;&#39;1992-03-01&#39;&nbsp;,&nbsp;&#39;女&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;07&#39;&nbsp;,&nbsp;&#39;郑竹&#39;&nbsp;,&nbsp;&#39;1989-07-01&#39;&nbsp;,&nbsp;&#39;女&#39;);insert&nbsp;into&nbsp;Student&nbsp;values(&#39;08&#39;&nbsp;,&nbsp;&#39;王菊&#39;&nbsp;,&nbsp;&#39;1990-01-20&#39;&nbsp;,&nbsp;&#39;女&#39;);--课程表测试数据insert&nbsp;into&nbsp;Course&nbsp;values(&#39;01&#39;&nbsp;,&nbsp;&#39;语文&#39;&nbsp;,&nbsp;&#39;02&#39;);insert&nbsp;into&nbsp;Course&nbsp;values(&#39;02&#39;&nbsp;,&nbsp;&#39;数学&#39;&nbsp;,&nbsp;&#39;01&#39;);insert&nbsp;into&nbsp;Course&nbsp;values(&#39;03&#39;&nbsp;,&nbsp;&#39;英语&#39;&nbsp;,&nbsp;&#39;03&#39;);--教师表测试数据insert&nbsp;into&nbsp;Teacher&nbsp;values(&#39;01&#39;&nbsp;,&nbsp;&#39;张三&#39;);insert&nbsp;into&nbsp;Teacher&nbsp;values(&#39;02&#39;&nbsp;,&nbsp;&#39;李四&#39;);insert&nbsp;into&nbsp;Teacher&nbsp;values(&#39;03&#39;&nbsp;,&nbsp;&#39;王五&#39;);--成绩表测试数据insert&nbsp;into&nbsp;Score&nbsp;values(&#39;01&#39;&nbsp;,&nbsp;&#39;01&#39;&nbsp;,&nbsp;80);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;01&#39;&nbsp;,&nbsp;&#39;02&#39;&nbsp;,&nbsp;90);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;01&#39;&nbsp;,&nbsp;&#39;03&#39;&nbsp;,&nbsp;99);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;02&#39;&nbsp;,&nbsp;&#39;01&#39;&nbsp;,&nbsp;70);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;02&#39;&nbsp;,&nbsp;&#39;02&#39;&nbsp;,&nbsp;60);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;02&#39;&nbsp;,&nbsp;&#39;03&#39;&nbsp;,&nbsp;80);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;03&#39;&nbsp;,&nbsp;&#39;01&#39;&nbsp;,&nbsp;80);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;03&#39;&nbsp;,&nbsp;&#39;02&#39;&nbsp;,&nbsp;80);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;03&#39;&nbsp;,&nbsp;&#39;03&#39;&nbsp;,&nbsp;80);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;04&#39;&nbsp;,&nbsp;&#39;01&#39;&nbsp;,&nbsp;50);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;04&#39;&nbsp;,&nbsp;&#39;02&#39;&nbsp;,&nbsp;30);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;04&#39;&nbsp;,&nbsp;&#39;03&#39;&nbsp;,&nbsp;20);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;05&#39;&nbsp;,&nbsp;&#39;01&#39;&nbsp;,&nbsp;76);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;05&#39;&nbsp;,&nbsp;&#39;02&#39;&nbsp;,&nbsp;87);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;06&#39;&nbsp;,&nbsp;&#39;01&#39;&nbsp;,&nbsp;31);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;06&#39;&nbsp;,&nbsp;&#39;03&#39;&nbsp;,&nbsp;34);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;07&#39;&nbsp;,&nbsp;&#39;02&#39;&nbsp;,&nbsp;89);insert&nbsp;into&nbsp;Score&nbsp;values(&#39;07&#39;&nbsp;,&nbsp;&#39;03&#39;&nbsp;,&nbsp;98);12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">查询”01”课程比”02”课程成绩高的学生的信息及课程分数</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">SELECT\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.*,\r\n&nbsp;&nbsp;&nbsp;&nbsp;b.s_score&nbsp;01&nbsp;_score,\r\n&nbsp;&nbsp;&nbsp;&nbsp;c.s_score&nbsp;02&nbsp;_score&nbsp;\r\nFROM\r\n&nbsp;&nbsp;&nbsp;&nbsp;student&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;JOIN&nbsp;score&nbsp;b&nbsp;ON&nbsp;a.s_id&nbsp;=&nbsp;b.s_id&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;b.c_id&nbsp;=&nbsp;&#39;01&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;JOIN&nbsp;score&nbsp;c&nbsp;ON&nbsp;a.s_id&nbsp;=&nbsp;c.s_id&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;c.c_id&nbsp;=&nbsp;&#39;02&#39;&nbsp;WHERE\r\n&nbsp;&nbsp;&nbsp;&nbsp;b.s_score&nbsp;&gt;&nbsp;c.s_score123456789101112</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">SELECT\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id,\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_name,\r\n&nbsp;&nbsp;&nbsp;&nbsp;round(&nbsp;AVG(&nbsp;b.s_score&nbsp;),&nbsp;1&nbsp;)&nbsp;AS&nbsp;avg&nbsp;FROM\r\n&nbsp;&nbsp;&nbsp;&nbsp;student&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;JOIN&nbsp;score&nbsp;b&nbsp;ON&nbsp;a.s_id&nbsp;=&nbsp;b.s_id&nbsp;\r\nGROUP&nbsp;BY\r\n&nbsp;&nbsp;&nbsp;&nbsp;b.s_id&nbsp;\r\nHAVING\r\n&nbsp;&nbsp;&nbsp;&nbsp;avg&nbsp;&gt;=&nbsp;&#39;60&#39;1234567891011</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩 – (包括有成绩的和无成绩的)</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; outline: 0px; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 2px; padding: 4px 2px 0px; word-break: break-all;\">union 合并两个或多个 SELECT 语句的结果集(select语句必须有相同的列)</code></p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">SELECT\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id,\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_name,\r\n&nbsp;&nbsp;&nbsp;&nbsp;ROUND(&nbsp;AVG(&nbsp;b.s_score&nbsp;),&nbsp;2&nbsp;)&nbsp;avg&nbsp;FROM\r\n&nbsp;&nbsp;&nbsp;&nbsp;student&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;JOIN&nbsp;score&nbsp;b&nbsp;ON&nbsp;a.s_id&nbsp;=&nbsp;b.s_id&nbsp;\r\nGROUP&nbsp;BY\r\n&nbsp;&nbsp;&nbsp;&nbsp;b.s_id&nbsp;\r\nHAVING\r\n&nbsp;&nbsp;&nbsp;&nbsp;avg&nbsp;&lt;&nbsp;60&nbsp;UNIONSELECT\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id,\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_name,&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;AS&nbsp;avg&nbsp;FROM\r\n&nbsp;&nbsp;&nbsp;&nbsp;student&nbsp;a&nbsp;\r\nWHERE\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id&nbsp;NOT&nbsp;IN&nbsp;(&nbsp;SELECT&nbsp;DISTINCT&nbsp;s_id&nbsp;FROM&nbsp;score&nbsp;)\r\n------------------------------------------------------------------&nbsp;&nbsp;\r\nSELECT\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id,\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_name,\r\n&nbsp;&nbsp;&nbsp;&nbsp;ROUND(&nbsp;AVG(&nbsp;b.s_score&nbsp;),&nbsp;2&nbsp;)&nbsp;avg&nbsp;FROM\r\n&nbsp;&nbsp;&nbsp;&nbsp;student&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;JOIN&nbsp;score&nbsp;b&nbsp;ON&nbsp;a.s_id&nbsp;=&nbsp;b.s_id&nbsp;\r\nGROUP&nbsp;BY\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id&nbsp;\r\nHAVING\r\n&nbsp;&nbsp;&nbsp;&nbsp;avg&nbsp;&lt;&nbsp;60&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;OR&nbsp;avg&nbsp;IS&nbsp;NULL1234567891011121314151617181920212223242526272829303132</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">SELECT\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id,\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_name,&nbsp;&nbsp;&nbsp;&nbsp;count(&nbsp;b.c_id&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;sum(&nbsp;b.s_score&nbsp;)&nbsp;\r\nFROM\r\n&nbsp;&nbsp;&nbsp;&nbsp;student&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;JOIN&nbsp;score&nbsp;b&nbsp;ON&nbsp;a.s_id&nbsp;=&nbsp;b.s_id&nbsp;\r\nGROUP&nbsp;BY\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.s_id</pre><p><br/></p>', 'mysql经典练习题', 'mysql', 'at15e37597-1ac1-4726-9062-8ab05971753f.jpg', 2, 5, 0, NULL, '2019-02-07 13:56:11', '2018-08-24 15:28:02', '2019-02-11 11:13:21');
INSERT INTO `article` VALUES (27, 4, 2, 'qyd2', 'Mybatis技术内幕系列博客，从原理和源码角度，介绍了其内部实现细节，无论是写的好与不好，我确实是用心写了，由于并不是介绍如何使用Mybatis的文章，所以，一些参数使用细节略掉了，我们的目标是介绍...', '<p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Mybatis技术内幕系列博客，从原理和源码角度，介绍了其内部实现细节，无论是写的好与不好，我确实是用心写了，由于并不是介绍如何使用Mybatis的文章，所以，一些参数使用细节略掉了，我们的目标是介绍Mybatis的技术架构和重要组成部分，以及基本运行原理。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">博客写的很辛苦，但是写出来却不一定好看，所谓开始很兴奋，过程很痛苦，结束很遗憾。要求不高，只要读者能从系列博客中，学习到一点其他博客所没有的技术点，作为作者，我就很欣慰了，我也读别人写的博客，通常对自己当前研究的技术，是很有帮助的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">尽管还有很多可写的内容，但是，我认为再写下去已经没有意义，任何其他小的功能点，都是在已经介绍的基本框架和基本原理下运行的，只有结束，才能有新的开始。写博客也积攒了一些经验，源码多了感觉就是复制黏贴，源码少了又觉得是空谈原理，将来再写博客，我希望是“精炼博文”，好读好懂美观读起来又不累，希望自己能再写一部开源分布式框架原理系列博客。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">有胆就来，我出几道Mybatis面试题，看你能回答上来几道（都是我出的，可不是网上找的）。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">1、#{}和${}的区别是什么？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：这道题是面试官面试我同事的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：${}是Properties文件中的变量占位符，它可以用于标签属性值和sql内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc.Driver。#{}是sql的参数占位符，Mybatis会将sql中的#{}替换为?号，在sql执行前会使用PreparedStatement的参数设置方法，按序给sql的?号占位符设置参数值，比如ps.setInt(0, parameterValue)，#{item.name}的取值方式为使用反射从参数对象中获取item对象的name属性值，相当于param.getItem().getName()。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">2、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：这道题是京东面试官面试我时问的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：还有很多其他的标签，&lt;resultMap&gt;、&lt;parameterMap&gt;、&lt;sql&gt;、&lt;include&gt;、&lt;selectKey&gt;，加上动态sql的9个标签，trim|where|set|foreach|if|choose|when|otherwise|bind等，其中&lt;sql&gt;为sql片段标签，通过&lt;include&gt;标签引入sql片段，&lt;selectKey&gt;为不支持自增的主键生成策略标签。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">3、最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：这道题也是京东面试官面试我时问的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Dao接口，就是人们常说的Mapper接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中MappedStatement的id值，接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MappedStatement，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace为com.mybatis3.mappers.StudentDao下面id =&nbsp;findStudentById的MappedStatement。在Mybatis中，每一个&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签，都会被解析为一个MappedStatement对象。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">4、Mybatis是如何进行分页的？分页插件的原理是什么？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t&nbsp;limit 0，10</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">5、简述Mybatis的插件运行原理，以及如何编写一个插件。</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">6、Mybatis执行批量插入，能返回数据库主键列表吗？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：能，JDBC都能，Mybatis当然也能。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">7、Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，Mybatis提供了9种动态sql标签trim|where|set|foreach|if|choose|when|otherwise|bind。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">8、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：第一种是使用&lt;resultMap&gt;标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME&nbsp;AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME&nbsp;AS NaMe，Mybatis一样可以正常工作。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">9、Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：能，Mybatis不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询，多对一查询，其实就是一对一查询，只需要把selectOne()修改为selectList()即可；多对多查询，其实就是一对多查询，只需要把selectOne()修改为selectList()即可。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">关联对象查询，有两种实现方式，一种是单独发送一个sql去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用join查询，一部分列是A对象的属性值，另外一部分列是关联对象B的属性值，好处是只发一个sql查询，就可以把主对象和其关联对象查出来。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">那么问题来了，join查询出来100条记录，如何确定主对象是5个，而不是100个？其去重复的原理是&lt;resultMap&gt;标签内的&lt;id&gt;子标签，指定了唯一确定一条记录的id列，Mybatis根据&lt;id&gt;列值来完成100条记录的去重复功能，&lt;id&gt;可以有多个，代表了联合主键的语意。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">举例：下面join查询出来6条记录，一、二列是Teacher对象列，第三列为Student对象列，Mybatis去重复处理后，结果为1个老师6个学生，而不是6个老师6个学生。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp;t_id &nbsp; &nbsp;t_name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;s_id</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 | teacher &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;38 |<br/>| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 | teacher &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;39 |<br/>| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 | teacher &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;40 |<br/>| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 | teacher &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;41 |<br/>| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 | teacher &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;42 |<br/>| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 | teacher &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;43 |</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">10、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">11、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">原因就是namespace+id是作为Map&lt;String,&nbsp;MappedStatement&gt;的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">12、Mybatis中如何执行批处理？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：使用BatchExecutor完成批处理。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">13、Mybatis都有哪些Executor执行器？它们之间的区别是什么？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis有三种基本的Executor执行器，<strong style=\"margin: 0px; padding: 0px;\">SimpleExecutor、ReuseExecutor、BatchExecutor。</strong></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">SimpleExecutor：</strong>每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">ReuseExecutor：</strong>执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">BatchExecutor：</strong>执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">14、Mybatis中如何指定使用哪一种Executor执行器？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：在Mybatis配置文件中，可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">15、Mybatis是否可以映射Enum枚举类？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">16、Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：虽然Mybatis解析Xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，Mybatis都可以正确识别。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">原理是，Mybatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，Mybatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，Mybatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">17、简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Mybatis将所有Xml配置信息都封装到All-In-One重量级对象Configuration内部。在Xml映射文件中，&lt;parameterMap&gt;标签会被解析为ParameterMap对象，其每个子元素会被解析为ParameterMapping对象。&lt;resultMap&gt;标签会被解析为ResultMap对象，其每个子元素会被解析为ResultMapping对象。每一个&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签均会被解析为MappedStatement对象，标签内的sql会被解析为BoundSql对象。</p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">18、为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h4><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注：我出的</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">答：Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">面试题看似都很简单，但是想要能正确回答上来，必定是研究过源码且深入的人，而不是仅会使用的人或者用的很熟的人，以上所有面试题及其答案所涉及的内容，在我的Mybatis系列博客中都有详细讲解和原理分析。</p><p><br/></p>', 'Mybatis常见面试题', 'java', 'at5956c6e5-c333-4815-afbe-4f1b6e19aad6.jpg', 1, 0, 0, NULL, '2019-02-07 13:56:11', '2018-08-25 19:31:14', '2019-02-04 11:13:26');
INSERT INTO `article` VALUES (30, 2, 15, '苏宏鹏', 'test1...', '<p>test1</p>', 'test11', 'java', 'at8e624954-aa1f-44e5-bbe0-865c3450aaa8.jpg', 2, 1, 0, NULL, '2019-02-07 13:56:11', '2018-08-27 15:21:55', '2019-02-08 11:13:31');
INSERT INTO `article` VALUES (31, 3, 16, 'test1', 'test22...', '<p>test22</p>', 'test22', 'html', 'ate7cc65ae-a570-423a-a15a-7188561ebf36.jpg', 2, 0, 0, NULL, '2019-02-07 13:56:11', '2018-08-27 15:22:13', '2019-02-11 11:13:21');
INSERT INTO `article` VALUES (32, 4, 17, 'test2', 'test3...', '<p>test3</p>', 'test33', 'mysql', 'ata110ec0c-49ef-42ed-943b-9dd183ace91f.jpg', 1, 1, 0, NULL, '2019-02-07 13:56:11', '2018-08-27 15:25:01', '2019-02-04 11:13:26');
INSERT INTO `article` VALUES (35, 1, 18, 'shp', 'test444444444...', '<p>test444444444<br/></p>', 'test44', '程序人生', 'at98836038-7a0a-40f9-9bd5-750e5b20274f.jpg', 2, 1, 0, NULL, '2019-02-07 13:56:11', '2018-08-27 15:36:51', '2019-02-08 11:13:31');
INSERT INTO `article` VALUES (36, 5, 19, 'qiuyunduo', 'asdasdasdasdasd...', '<p style=\"text-align: center;\">asdasdasdasdasd</p>', 'shp', 'html', 'at795698d5-0ae8-4560-a078-2a0b40fd6e7b.jpg', 2, 1, 0, NULL, '2019-02-07 13:56:11', '2018-08-28 09:45:48', '2019-02-11 11:14:02');
INSERT INTO `article` VALUES (39, 2, 26, '褚禄山', '123', '<p>123</p>', '123', '123', 'http://localhost:9000/static/storage/ob9kh78oolx72ct8dwul.jpg', 1, 0, 0, '2019-03-21 19:08:30', NULL, '2019-03-21 19:08:30', '2019-03-21 19:08:30');
INSERT INTO `article` VALUES (40, 2, 26, '褚禄山', '跨域是我在日常面试中经常会问到的问题，这词在前端界出现的频率不低，主要原因还是由于安全限制(同源策略， 即JavaScript或Cookie只能访问同域下的内容)，因为我们在日常的项目开发时会不可避免', '<p>跨域是我在日常面试中经常会问到的问题，这词在前端界出现的频率不低，主要原因还是由于安全限制(同源策略， 即JavaScript或Cookie只能访问同域下的内容)，因为我们在日常的项目开发时会不可避免的需要进行跨域操作，所以跨域能力也算是前端工程师的基本功之一。</p><p><br/></p>', 'AJAX POST&跨域 解决方案 ', 'cors', 'http://localhost:9000/static/storage/3tiszypkpd1qnepdmqfp.jpg', 0, 0, 0, NULL, NULL, '2019-03-21 19:23:24', '2019-03-21 19:23:24');
INSERT INTO `article` VALUES (41, 2, 26, '褚禄山', '跨域是我在日常面试中经常会问到的问题，这词在前端界出现的频率不低，主要原因还是由于安全限制(同源策略， 即JavaScript或Cookie只能访问同域下的内容)，因为我们在日常的项目开发时会不可避免', '<p>跨域是我在日常面试中经常会问到的问题，这词在前端界出现的频率不低，主要原因还是由于安全限制(同源策略， 即JavaScript或Cookie只能访问同域下的内容)，因为我们在日常的项目开发时会不可避免的需要进行跨域操作，所以跨域能力也算是前端工程师的基本功之一。</p><p><br/></p>', 'AJAX POST&跨域 解决方案 ', 'cors', 'http://localhost:9000/static/storage/3tiszypkpd1qnepdmqfp.jpg', 0, 0, 0, NULL, NULL, '2019-03-21 19:23:24', '2019-03-21 19:23:24');
INSERT INTO `article` VALUES (42, 1, 26, '褚禄山', 'asdasdasdasdasdsadasdasdasdasdsad', '<p>asdasdasdasdasdsadasdasdasdasdsad</p>', 'asd', 'asd', 'http://localhost:9000/static/storage/vlgd879rn8dy342wrt3c.jpg', 1, 0, 0, '2019-03-21 19:34:08', NULL, '2019-03-21 19:34:08', '2019-03-21 19:34:08');
INSERT INTO `article` VALUES (43, 2, 26, '褚禄山', 'asd', '<table><tbody><tr class=\"firstRow\"><td width=\"963\" valign=\"top\"><br/></td></tr><tr><td width=\"963\" valign=\"top\"><br/></td></tr></tbody></table><p>asd</p>', 'asd', 'asd', 'http://localhost:9000/static/storage/7cpovdjjluivyfjecy3p.jpg', 1, 0, 0, '2019-03-21 19:34:45', NULL, '2019-03-21 19:34:45', '2019-03-21 19:34:45');
INSERT INTO `article` VALUES (44, 3, 26, '褚禄山', '今日数据提交出现 http:413 Request Entity Too Large 错误。解决问题后特此记录今日数据提交出现 http:413 错误经查是上传文件大小被限制了，将服务器限制了上传文件', '<p>今日数据提交出现 http:413 Request Entity Too Large 错误。</p><p><br/></p><p>解决问题后特此记录</p><p><br/></p><p>今日数据提交出现 http:413 错误</p><p><br/></p><p>经查是上传文件大小被限制了，将服务器限制了上传文件的大小设置成20M，重启服务并没有解决问题。</p><p><br/></p><p>进一步跟进发现根本原因：</p><p><br/></p><p>我们的tomcat是通过nginx发现服务代理的，nginx默认上传传文件的大小限制是1M，在nginx的配置中修改配置后可解决此问题。</p><p><br/></p><p>解决方法如下：&nbsp;</p><p><br/></p><p>1.打开nginx服务的配置文件nginx.conf</p><p><br/></p><p>2.在http{}中加入client_max_body_size xxm, xx根据需求改动</p><p><br/></p><p>3.保存后重启nginx，问题解决。</p><p>---------------------&nbsp;</p><p>作者：aaa5600&nbsp;</p><p>来源：CSDN&nbsp;</p><p>原文：https://blog.csdn.net/aaa5600/article/details/81179758&nbsp;</p><p>版权声明：本文为博主原创文章，转载请附上博文链接！</p><p><br/></p>', 'asd', 'asd', 'http://localhost:9000/static/storage/cppc3kipd6ow9qh0j5ly.jpg', 0, 0, 0, NULL, NULL, '2019-03-21 19:49:08', '2019-03-21 19:49:08');
INSERT INTO `article` VALUES (45, 4, 26, '褚禄山', 'ａｓｄ', '<p>ａｓｄ</p>', 'asasd', 'asddas', 'http://localhost:9000/static/storage/znytnuzm4prkjzp2jqy0.jpg', 0, 0, 0, NULL, NULL, '2019-03-21 19:52:08', '2019-03-21 19:52:08');
INSERT INTO `article` VALUES (46, 3, 26, '褚禄山', 'qweqweqweqwe', '<p>qweqweqweqwe</p>', 'qwe', 'qwewq', 'http://localhost:9000/static/storage/rton3krivw78lo0xe04j.png', 0, 0, 0, NULL, NULL, '2019-03-21 19:54:43', '2019-03-21 19:54:43');
INSERT INTO `article` VALUES (47, 3, 26, '褚禄山', '1231231', '<p>1231231</p>', '123123', '12312', 'http://localhost:9000/static/storage/nlo30na5tmt9nscu23g7.jpg', 0, 0, 0, NULL, NULL, '2019-03-21 19:56:09', '2019-03-21 19:56:09');

-- ----------------------------
-- Table structure for article_class
-- ----------------------------
DROP TABLE IF EXISTS `article_class`;
CREATE TABLE `article_class`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '一级类别自增ID',
  `name` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类名称',
  `pid` mediumint(9) NOT NULL COMMENT '二级类别ID',
  `add_time` datetime(0) NULL DEFAULT NULL COMMENT '记录添加时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '记录修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_class
-- ----------------------------
INSERT INTO `article_class` VALUES (1, '程序人生', 0, NULL, NULL);
INSERT INTO `article_class` VALUES (2, '编程', 0, NULL, NULL);
INSERT INTO `article_class` VALUES (3, '前端', 0, NULL, NULL);
INSERT INTO `article_class` VALUES (4, '数据库', 0, NULL, NULL);
INSERT INTO `article_class` VALUES (5, '算法', 0, NULL, NULL);
INSERT INTO `article_class` VALUES (6, '其他', 0, NULL, NULL);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `article_id` mediumint(9) NOT NULL DEFAULT 0 COMMENT '对应文章id',
  `user_id` mediumint(9) NOT NULL COMMENT '点赞者id',
  `add_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '添加时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 31 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (1, 21, 19, '2018-08-26 15:41:29', NULL);
INSERT INTO `comment` VALUES (2, 26, 19, '2018-08-26 15:50:45', NULL);
INSERT INTO `comment` VALUES (3, 21, 19, '2018-08-26 16:38:06', NULL);
INSERT INTO `comment` VALUES (4, 21, 19, '2018-08-26 16:39:29', NULL);
INSERT INTO `comment` VALUES (5, 23, 19, '2018-08-26 16:40:25', NULL);
INSERT INTO `comment` VALUES (6, 20, 19, '2018-08-26 16:48:04', NULL);
INSERT INTO `comment` VALUES (7, 24, 19, '2018-08-26 17:15:09', NULL);
INSERT INTO `comment` VALUES (8, 19, 19, '2018-08-26 17:22:59', NULL);
INSERT INTO `comment` VALUES (9, 19, 19, '2018-08-26 17:24:44', NULL);
INSERT INTO `comment` VALUES (10, 19, 19, '2018-08-26 17:25:15', NULL);
INSERT INTO `comment` VALUES (11, 26, 19, '2018-08-26 17:33:55', NULL);
INSERT INTO `comment` VALUES (12, 26, 19, '2018-08-26 17:37:03', NULL);
INSERT INTO `comment` VALUES (13, 25, 19, '2018-08-26 17:39:51', NULL);
INSERT INTO `comment` VALUES (14, 25, 19, '2018-08-26 17:41:04', NULL);
INSERT INTO `comment` VALUES (15, 25, 19, '2018-08-26 17:41:59', NULL);
INSERT INTO `comment` VALUES (16, 18, 19, '2018-08-26 17:43:51', NULL);
INSERT INTO `comment` VALUES (17, 18, 19, '2018-08-26 17:44:36', NULL);
INSERT INTO `comment` VALUES (18, 22, 19, '2018-08-26 17:46:43', NULL);
INSERT INTO `comment` VALUES (19, 22, 19, '2018-08-26 17:46:52', NULL);
INSERT INTO `comment` VALUES (20, 22, 19, '2018-08-26 19:34:25', NULL);
INSERT INTO `comment` VALUES (21, 24, 19, '2018-08-27 10:09:42', NULL);
INSERT INTO `comment` VALUES (22, 21, 18, '2018-08-27 10:11:12', NULL);
INSERT INTO `comment` VALUES (23, 23, 20, '2018-08-27 15:09:11', NULL);
INSERT INTO `comment` VALUES (24, 26, 16, '2018-08-27 15:47:22', NULL);
INSERT INTO `comment` VALUES (25, 30, 19, '2018-08-27 15:50:24', NULL);
INSERT INTO `comment` VALUES (26, 35, 19, '2018-08-27 15:51:16', NULL);
INSERT INTO `comment` VALUES (27, 32, 19, '2018-08-27 15:58:27', NULL);
INSERT INTO `comment` VALUES (28, 26, 18, '2018-08-27 19:26:50', NULL);
INSERT INTO `comment` VALUES (29, 25, 18, '2018-08-28 09:44:12', NULL);
INSERT INTO `comment` VALUES (30, 36, 18, '2018-08-28 09:47:53', NULL);

-- ----------------------------
-- Table structure for reply
-- ----------------------------
DROP TABLE IF EXISTS `reply`;
CREATE TABLE `reply`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `comment_id` mediumint(9) NOT NULL DEFAULT 0 COMMENT '对应评论id',
  `user_id` mediumint(9) NOT NULL COMMENT '作者id',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `add_time` datetime(0) NULL DEFAULT NULL COMMENT '添加时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for thumb
-- ----------------------------
DROP TABLE IF EXISTS `thumb`;
CREATE TABLE `thumb`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `article_id` mediumint(9) NOT NULL DEFAULT 0 COMMENT '对应文章id',
  `user_id` mediumint(9) NOT NULL COMMENT '评论者id',
  `nick_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论者昵称',
  `head_image` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论者头像',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `floor` int(8) NULL DEFAULT NULL COMMENT '评论楼层，第几位评论者',
  `add_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '评论时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 31 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of thumb
-- ----------------------------
INSERT INTO `thumb` VALUES (1, 21, 19, 'qiuyunduo', '', '我是qiuyunduo评论', NULL, '2018-08-26 15:41:29', NULL);
INSERT INTO `thumb` VALUES (2, 26, 19, 'qiuyunduo', NULL, '123', NULL, '2018-08-26 15:50:45', NULL);
INSERT INTO `thumb` VALUES (3, 21, 19, 'qiuyunduo', NULL, 'test11111111', NULL, '2018-08-26 16:38:06', NULL);
INSERT INTO `thumb` VALUES (4, 21, 19, 'qiuyunduo', NULL, '112313', NULL, '2018-08-26 16:39:29', NULL);
INSERT INTO `thumb` VALUES (5, 23, 19, 'qiuyunduo', NULL, '123qweqweq', NULL, '2018-08-26 16:40:25', NULL);
INSERT INTO `thumb` VALUES (6, 20, 19, 'qiuyunduo', NULL, '123dfg', NULL, '2018-08-26 16:48:04', NULL);
INSERT INTO `thumb` VALUES (7, 24, 19, 'qiuyunduo', NULL, '123445', NULL, '2018-08-26 17:15:09', NULL);
INSERT INTO `thumb` VALUES (8, 19, 19, 'qiuyunduo', NULL, 'kloijkmbyi', NULL, '2018-08-26 17:22:59', NULL);
INSERT INTO `thumb` VALUES (9, 19, 19, 'qiuyunduo', NULL, 'asd', NULL, '2018-08-26 17:24:44', NULL);
INSERT INTO `thumb` VALUES (10, 19, 19, 'qiuyunduo', NULL, '12334\r\n23234\r\n23432', NULL, '2018-08-26 17:25:15', NULL);
INSERT INTO `thumb` VALUES (11, 26, 19, 'qiuyunduo', NULL, '456', NULL, '2018-08-26 17:33:55', NULL);
INSERT INTO `thumb` VALUES (12, 26, 19, 'qiuyunduo', NULL, '好像测试成功额', NULL, '2018-08-26 17:37:03', NULL);
INSERT INTO `thumb` VALUES (13, 25, 19, 'qiuyunduo', NULL, 'ｈｅｈｅ', NULL, '2018-08-26 17:39:51', NULL);
INSERT INTO `thumb` VALUES (14, 25, 19, 'qiuyunduo', NULL, '呵呵', NULL, '2018-08-26 17:41:04', NULL);
INSERT INTO `thumb` VALUES (15, 25, 19, 'qiuyunduo', NULL, '爱仕达', NULL, '2018-08-26 17:41:59', NULL);
INSERT INTO `thumb` VALUES (16, 18, 19, 'qiuyunduo', NULL, '真厉害', NULL, '2018-08-26 17:43:51', NULL);
INSERT INTO `thumb` VALUES (17, 18, 19, 'qiuyunduo', NULL, '１２３', NULL, '2018-08-26 17:44:36', NULL);
INSERT INTO `thumb` VALUES (18, 22, 19, 'qiuyunduo', NULL, '厉害了我的歌', NULL, '2018-08-26 17:46:43', NULL);
INSERT INTO `thumb` VALUES (19, 22, 19, 'qiuyunduo', NULL, '玩群的愈合', NULL, '2018-08-26 17:46:52', NULL);
INSERT INTO `thumb` VALUES (20, 22, 19, 'qiuyunduo', NULL, '123231', NULL, '2018-08-26 19:34:25', NULL);
INSERT INTO `thumb` VALUES (21, 24, 19, 'qiuyunduo', NULL, '又是我来评论了', NULL, '2018-08-27 10:09:42', NULL);
INSERT INTO `thumb` VALUES (22, 21, 18, 'qiuyunduo', NULL, '新来的\r\n', NULL, '2018-08-27 10:11:12', NULL);
INSERT INTO `thumb` VALUES (23, 23, 20, 'qiuyunduo', NULL, '呵呵', NULL, '2018-08-27 15:09:11', NULL);
INSERT INTO `thumb` VALUES (24, 26, 16, 'qiuyunduo', NULL, 'hehe\r\n', NULL, '2018-08-27 15:47:22', NULL);
INSERT INTO `thumb` VALUES (25, 30, 19, 'qiuyunduo', NULL, '你好啊', NULL, '2018-08-27 15:50:24', NULL);
INSERT INTO `thumb` VALUES (26, 35, 19, 'qiuyunduo', NULL, 'nihao ', NULL, '2018-08-27 15:51:16', NULL);
INSERT INTO `thumb` VALUES (27, 32, 19, 'qiuyunduo', NULL, '又是我', NULL, '2018-08-27 15:58:27', NULL);
INSERT INTO `thumb` VALUES (28, 26, 18, 'qiuyunduo', NULL, '爱仕达', NULL, '2018-08-27 19:26:50', NULL);
INSERT INTO `thumb` VALUES (29, 25, 18, 'qiuyunduo', NULL, 'hehe', NULL, '2018-08-28 09:44:12', NULL);
INSERT INTO `thumb` VALUES (30, 36, 18, 'qiuyunduo', NULL, 'asda', NULL, '2018-08-28 09:47:53', NULL);

SET FOREIGN_KEY_CHECKS = 1;
